#!/usr/bin/env bash
# /usr/local/bin/entrypoint

# GLOBAL VARS

VMID=""      # as reported by `vboxmanage list vms`
VMNAME=""    # as reported by `vboxmanage list vms`
VHLSS_PID=0  # VBoxHeadless subshell PID


main()
{
    local CMD
    CMD="${1:-run}"

    # SUPPORTED COMMANDS REQUIRE OBTAINING VMID, DEAL WITH THEM LATER
    # IF COMMAND IS NOT SUPPORTED, DO exec $@
    case "$CMD" in "list"|"state"|"run"|"healthcheck") true ;;
    *) exec "$@" ;;
    esac

    # VMDIR - the container's VOLUME where VBox folder with .vbox file was mounted
    # VBUID - in-container userID to run VBoxHeadless and VBoxManage
    # Both are set and preserved as ENV in Dockerfile
    if  test -z "$VMDIR" || test -z "$VBUID"
    then msg_ "Error" "VMDIR and VBUID should have been set in the environment"; false; return 1
    fi

    # GET THE REGISTERED VM NAME AND ID, REGISTER .VBOX IF NECESSARY

    if ! get_vm_name_and_id
    then
        find_and_register_vm || return 1
        if ! get_vm_name_and_id
        then msg_ "Error" "No any registered VBox machine found"; false; return 1
        fi
    fi

    # COMMAND DISPATCHER
    case "$CMD" in
        "run")          vm_run ;;
        "list")         vm_list ;;
        "state")        vm_state ;;
        "healthcheck")  healthcheck ;;  # healthcheck does not return here
    esac
}


get_vm_name_and_id()
{
    # `vboxmanage list vms` can send irrelevant messages to stdout instead of stderr,
    # select from the output only the lines looking like VMs list.
    # Pick only the 1st VM found.
    local entry vmid_re
    vmid_re='[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}'
    read -r entry < <(
        vboxmanage list vms 2>/dev/null |\
        grep -siPm 1 '".+"\s+{'"$vmid_re"'}'
        )
    read VMID < <(grep -siPo "$vmid_re" 2>/dev/null <<< "$entry")

    VMNAME="${entry//\{$VMID\}/}"
    VMNAME="${VMNAME%% }"
    test -n "$VMNAME" && test -n "$VMID" && test -n "$(vm_state)"
    # The successful testing of vm_state here confirms that found VMID can be used for managing VM
}


find_and_register_vm()
{
    local vmconf

    read -r vmconf < <(
        find "$VMDIR" -iname "*.vbox" -print0 |\
        sort -zh |\
        head -zn 1 | tr '\0' '\n'
        )

    if test -z "$vmconf" || ! test -r "$vmconf"
    then msg_ "Error" "Could not find any *.vbox file"; false; return 1
    fi

    if vboxmanage registervm "$vmconf"
    then
        msg_ "Info" "${vmconf##*/} is registered"
    else
        msg_ "Error" "Could not register '$vmconf'"; false; return 1
    fi
}


vm_run()
{
    # RUN THE REGISTERED VM WITH VBoxHeadless

    if ! vm_start
    then msg_ "Error" "Could not start $VMNAME"; false; return 1
    fi

    # SUSPEND FURTHER EXECUTION TILL VBoxHeadless TERMINATES

    # `wait $VHLSS_PID` is essential here to trap SIGTERM
    msg_ "Info" "Suspend ${0##*/}:run() while VBoxHeadless subshell PID=$VHLSS_PID is running"
    wait $VHLSS_PID
    EC=$?
    msg_ "Info" "VBoxHeadless subshell exited with EC=$EC"
    msg_ "Info" "Resuming ${0##*/}:run()"

    # Waiting for the VBoxHeadless itself is not redundant here
    msg_ "Info" "Waiting for VBoxHeadless to exit"
    pwait -u "$VBUID" -i 'VBoxHeadless' &
    WAIT_VHL_PID=$!
    wait $WAIT_VHL_PID

    msg_ "Info" "Waiting for the background VBox processes to terminate..."
    pwait -u "$VBUID" -i 'VBoxSVC' 'VBoxXPCOMIPCD'
    msg_ "Info" "All done"
}


vm_start()
{
    msg_ "Info" "Launching $VMNAME"

    vboxheadless --startvm "$VMID" &  # Here, EC=0 even if vboxheadless
    VHLSS_PID=$!

    if test -n "$VHLSS_PID" && test $VHLSS_PID -gt 1
    then msg_ "Info"  "VBoxHeadless subshell PID=$VHLSS_PID"
    else msg_ "Error" "Could not get VHLSS_PID"; false; return 1
    fi

    # Wait a little for VBoxHeadless to exit
    # in the case of an immediate failure.
    sleep 1

    # Then check if VBoxHeadless is still running and
    # if it is, consider the launch successful

    if  pgrep -u "$VBUID" -i 'VBoxHeadless' > "/dev/null" && \
        ps --no-headers -p "$VHLSS_PID" -o pid > "/dev/null" # && \
        # vm_state | grep -qiP '(running|restoring|paused)'
    then
        msg_ "Info" "$VMNAME has started"
        return 0
    else
        msg_ "Error" "VBoxHeadless --startvm $VMNAME has aborted"
        false; return 1
    fi
}


vm_stop()
{
    STOP_CMD="${1:-acpipowerbutton}"

    VM_STATE="$(vm_state)"

    msg_ "Info" "$VMNAME state is $VM_STATE"

    if grep -qiP '(poweroff|aborted|saved)' <<< "$VM_STATE"
    then
        msg_ "Info" "Not sending '$STOP_CMD' signal"
    else
        msg_ "Info" "Sending '$STOP_CMD' signal to $VMNAME"
        if vboxmanage controlvm "$VMID" "$STOP_CMD"
        then msg_ "Info" "$VMNAME received '$STOP_CMD' signal"
        else msg_ "Error" "vboxmanage controlvm $VMNAME '$STOP_CMD'"; false; return 1
        fi
    fi
    return 0
}


vm_state()
{
    # When $VMID is valid, output 'VMState=...'
    # Otherwise, output is empty. Test of VMID validity relies on this.
    vboxmanage showvminfo "$VMID" --machinereadable 2>/dev/null |\
    grep -siP 'VMState=' |\
    cut -d "=" -f 2
    return 0
}


healthcheck()
{
    if test -x "/usr/local/bin/healthcheck"
    then
        # External healthcheck can do more relevant tests,
        # for example it can check availability of the services provided by the guest
        exec "/usr/local/bin/healthcheck"
    else
        # https://www.virtualbox.org/sdkref/_virtual_box_8idl.html#a80b08f71210afe16038e904a656ed9eb
        vm_state | grep -qiP '(running|restoring|saving|paused|saved)'
        exit $?
    fi
}


vm_list()
{
    echo "Name=$VMNAME"
    echo "ID=$VMID"
}


msg_() {
#   param 1: msg Type, like Error, Info, Warning...
#   param 2: msg text.
    printf "%-8s %s\n" "$1" "$2"
}


# HANDLE SIGNALS

trap_INT(){ sig_trapper 'INT'; }
trap_QUIT(){ sig_trapper 'QUIT'; }
trap_TERM(){ sig_trapper 'TERM'; }
sig_trapper()
{
    msg_ "Info" "Signal $1 trapped"
    case "$1" in
        "INT") vm_stop "savestate" ;;
        "QUIT") vm_stop "poweroff" ;;
        "TERM") vm_stop "acpipowerbutton" ;;
    esac
    msg_ "Info" "Trap $1 finished"
}


on_error()
{
    msg_ "Error" "in '$BASH_COMMAND' line $(caller)"
    return 1
}


trap on_error ERR
trap trap_INT INT
trap trap_QUIT QUIT
trap trap_TERM TERM

main "$@"
