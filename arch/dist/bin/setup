#!/usr/bin/env bash
# /usr/local/bin/setup

# Set `/etc/localtime`
# Install Oracle_VM_VirtualBox_Extension_Pack
# Prepare $HOME for $VBUSR
# Move /usr/local/bin/vm*create* into /home/$VBUSR/
# Prepare $VMDIR

set -eE


main()
{
    # VMDIR, VBUSR, VBUID, and TZONE should be set in the environment.

    test -n "$VMDIR" && test -n "$VBUSR" && test -n "$VBUID" && test -n "$TZONE"

    ln -sf "/usr/share/zoneinfo/$TZONE" "/etc/localtime"

    install_vb_ext

    user_add

    mv_vm_create

    mkdir -p "$VMDIR"

    set_perm_vmdir
}


install_vb_ext()
{
    local VBVER EXTURL EXTFILE

    # Get the version of the installed VirtualBox
    # to download and install the Extension Pack of the same version.

    # VBoxManage sends irrelevant outputs and return codes to stdout
    # So, the output is to go through grep,
    # but piping fails if pipefail is in force.
    # Parse VBoxManage output step-by-step

    VBVER="$(VBoxManage -v)"
    VBVER="$(grep -siPo '\d{1}\.\d{1,2}\.\d{1,3}r\d{6,7}' <<< "$VBVER")"
    VBVER="${VBVER%r*}"

    EXTURL="https://download.virtualbox.org/virtualbox/$VBVER/Oracle_VM_VirtualBox_Extension_Pack-$VBVER.vbox-extpack"
    EXTFILE="${EXTURL##*/}"

    if ! test -r "$EXTFILE"
    then curl -sO "$EXTURL"
    fi
    echo "y" | VBoxManage extpack install --replace --accept-license=sha256 "$EXTFILE"
    rm "$EXTFILE"
    return 0
}


user_add()
{
    # Add a no-login user with a real HOME dir.
    # The HOME dir is used by VBox for its persistent data.
    groupadd --gid "$VBUID" "$VBUSR"
    useradd -m --uid "$VBUID" --gid "$VBUID" -s "/usr/bin/nologin" -c "VirtualBoxRunner" "$VBUSR"
    passwd -l "$VBUSR"
    chmod -cR u=rwX,go= "/home/$VBUSR"
}


mv_vm_create()
{
    local FILE

    while read -r FILE
    do
        if ! mv -ut "/home/$VBUSR" "$FILE"
        then echo "Error: while moving '$FILE'. EC=$?"
        fi
    done < <( find "/usr/local/bin" -type f -iname "vm*create*" | sort )

    chmod -cR u=rwX,go= "/home/$VBUSR"
    chown -cR "$VBUSR":"$VBUSR" "/home/$VBUSR"
}


set_perm_vmdir()
{
    if test -d "$VMDIR"
    then
        chown -cR "$VBUID":"$VBUID" "$VMDIR"
        chmod -cR u=rwX,g=rX,o= "$VMDIR"
    else
        echo "Error: '$VMDIR' is not a directory."
    fi
}


on_error()
{
    echo "Error" "in $BASH_COMMAND line $(caller)"
    exit 1
}


trap on_error ERR

main
